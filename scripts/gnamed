#!/usr/bin/env python3
"""bootstrap a gene/protein name/reference repository"""
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see http://www.gnu.org/licenses/

import logging
import sys
import os

from argparse import ArgumentParser
from sqlalchemy.engine.url import URL
from sqlalchemy.exc import OperationalError

#import gnamed
from gnamed.constants import REPOSITORIES, Namespace
from gnamed.fetcher import Retrieve
from gnamed.orm import InitDb, RetrieveStrings, RetrieveCiteCounts, MapRepositories
from gnamed.parsers import taxa

__author__ = 'Florian Leitner <florian.leitner@gmail.com>'
__version__ = '1.0.1'

COMMANDS = ['fetch', 'list', 'init', 'load', 'display', 'count', 'map']
_cmd = None

for a in sys.argv:
    if a in COMMANDS:
        _cmd = a
        break

if _cmd == 'fetch':
    _usage = "%(prog)s [options] fetch KEY [KEY...]"
    _description = "download the files for one or more repositories"
elif _cmd == 'list':
    _usage = "%(prog)s [options] list"
    _description = "list all known repository keys with a description"
elif _cmd == 'init':
    _usage = "%(prog)s [options] init NODES NAMES MERGED"
    _description = "initialize the DB with these three taxonomy files"
elif _cmd == 'load':
    _usage = "%(prog)s [options] load KEY FILE [FILE...]"
    _description = "load a repository into the DB"
elif _cmd == 'display':
    _usage = "%(prog)s [options] display KEY"
    _description = "display all names & symbols for a repo in the DB"
elif _cmd == 'count':
    _usage = "%(prog)s [options] count KEY"
    _description = "count the citations for each record in the DB"
elif _cmd == 'map':
    _usage = "%(prog)s [options] map FROMKEY TOKEY"
    _description = "list all known (n:m) ID mappings between two repos"
else:
    _usage = "%(prog)s [options] CMD [args...]"
    _description = __doc__

parser = ArgumentParser(
    usage=_usage, description=_description,
    prog=os.path.basename(sys.argv[0]),
    epilog="(c) Florian Leitner 2012. All rights reserved. License: GPL v3."
)

parser.set_defaults(loglevel=logging.WARNING)

parser.add_argument(
    'command', metavar='CMD',
    choices=COMMANDS,
    help="one of: %s (see --help CMD for details)" % ", ".join(COMMANDS)
)
parser.add_argument(
    '--version', action='version', version=__version__
)

if _cmd == 'fetch':
    parser.add_argument(
        'repositories', metavar='KEY [KEY ...]', nargs='*',
        help="keys of all repositories to fetch"
    )
    parser.add_argument(
        '-d', '--directory', metavar="DIR", action='store',
        default=os.getcwd(),
        help="store files to specified directory [CWD]"
    )
elif _cmd == 'list':
    pass
else:
    # db configuration options
    parser.add_argument(
        '--database', metavar='DB', action='store',
        default=os.getenv('PGDATABASE', "gnamed_tmp"),
        help="database name [PGDATABASE=%(default)s]"
    )
    parser.add_argument(
        '--host', action='store',
        default=os.getenv('PGHOST', "localhost"),
        help="database host [PGHOST=%(default)s]"
    )
    parser.add_argument(
        '--port', action='store', type=int,
        default=int(os.getenv('PGPORT', "5432")),
        help="database port [PGPORT=%(default)s]"
    )
    parser.add_argument(
        '--driver', action='store',
        default='postgresql+psycopg2',
        help="database driver [%(default)s]"
    )
    parser.add_argument(
        '-u', '--username', metavar='NAME', action='store',
        default=os.getenv('PGUSER'),
        help="database username [PGUSER=%(default)s]"
    )
    parser.add_argument(
        '-p', '--password', metavar='PASS', action='store',
        default=os.getenv('PGPASSWORD'),
        help="database password [PGPASSWORD=%(default)s]"
    )

if _cmd == 'init':
    parser.add_argument(
        'nodes', metavar='NODES',
        help="a nodes.dmp NCBI Taxonomy file"
    )
    parser.add_argument(
        'names', metavar='NAMES',
        help="a names.dmp NCBI Taxonomy file"
    )
    parser.add_argument(
        'merged', metavar='MERGED',
        help="a merged.dmp NCBI Taxonomy file"
    )
elif _cmd == 'load':
    parser.add_argument(
        'repository', metavar='KEY',
        help="repository key to load"
    )
    parser.add_argument(
        'files', metavar='FILE [FILE ...]', nargs='+',
        help="path to the file(s) to load"
    )
elif _cmd == 'display':
    parser.add_argument(
        'repository', metavar='KEY',
        help="repository key to display"
    )
elif _cmd == 'count':
    parser.add_argument(
        'repository', metavar='KEY',
        help="repository key to display"
    )
elif _cmd == 'map':
    parser.add_argument(
        'from_repository', metavar='FROMKEY',
        help="source repository for the mapping"
    )
    parser.add_argument(
        'to_repository', metavar='TOKEY',
        help="target repository for the mapping"
    )

parser.add_argument(
    '-e', '--encoding', action='store', metavar="ENC",
    default=sys.getdefaultencoding(),
    help="process text files using specified encoding [%(default)s]"
)
parser.add_argument(
    '--error', action='store_const', const=logging.ERROR,
    dest='loglevel', help="set log level error [warn]"
)
parser.add_argument(
    '--info', action='store_const', const=logging.INFO,
    dest='loglevel', help="set log level info [warn]"
)
parser.add_argument(
    '--debug', action='store_const', const=logging.DEBUG,
    dest='loglevel', help="set log level debug [warn]"
)
parser.add_argument(
    '--logfile', metavar="FILE", help="log to file, not STDERR"
)

args = parser.parse_args()

logging.basicConfig(
    filename=args.logfile, level=args.loglevel,
    format="%(asctime)s %(name)s %(levelname)s: %(message)s"
)

if args.loglevel <= logging.DEBUG:
    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)


def ConnectDb(args):
    db_url = URL(args.driver, username=args.username, password=args.password,
                 host=args.host, port=args.port, database=args.database)
    logging.info('connecting to %s', db_url)

    try:
        InitDb(db_url)
    except OperationalError as oe:
        if logging.getLogger().isEnabledFor(logging.DEBUG):
            logging.exception("DB error")
        parser.error(str(oe.orig).strip())


if args.command == 'list':
    for key in REPOSITORIES:
        print("{}\t({})".format(key, REPOSITORIES[key]['description']))
elif args.command == 'fetch':
    logging.info('fetching %s', ', '.join(args.repositories))

    for repo_key in args.repositories:
        if repo_key not in REPOSITORIES:
            parser.error('repository key "{}" unknown'.format(repo_key))

    Retrieve(*args.repositories, directory=args.directory,
             encoding=args.encoding)
elif args.command == 'load' and args.repository:
    for filepath in args.files:
        if not os.path.exists(filepath):
            parser.error('file "{}" does not exist'.format(filepath))

    if args.repository not in tuple(REPOSITORIES) + ('entrezpg', 'uniprotpg'):
        parser.error('repository key "{}" unknown'.format(args.repository))

    ConnectDb(args)

    if args.repository in ('entrezpg', 'uniprotpg'):
        repo_parser_module = __import__(
            'gnamed.parsers.' + args.repository[:-2], globals(),
            fromlist=['SpeedLoader']
        )
        repo_parser = repo_parser_module.SpeedLoader(
            *args.files, encoding=args.encoding
        )
        userpass = "user={} password={} ".format(
            args.username, args.password
        ) if (args.username and args.password) else ""
        repo_parser.setDSN("{}host={} port={} dbname={}".format(
            userpass, args.host, args.port, args.database
        ))
    else:
        repo_parser_module = __import__(
            'gnamed.parsers.' + args.repository, globals(),
            fromlist=['Parser']
        )
        repo_parser = repo_parser_module.Parser(*args.files,
                                                encoding=args.encoding)

    repo_parser.parse()
elif args.command == 'init':
    for filepath in (args.nodes, args.names, args.merged):
        if not os.path.exists(filepath):
            parser.error('file "{}" does not exist'.format(filepath))

    ConnectDb(args)
    taxa_parser = taxa.Parser(args.nodes, args.names, args.merged,
                              encoding=args.encoding)
    taxa_parser.parse()
elif args.command == 'display':
    if args.repository not in REPOSITORIES:
        parser.error('repository key "{}" unknown'.format(args.repository))

    ConnectDb(args)
    key = getattr(Namespace, args.repository)

    for result in RetrieveStrings(key):
        print("\t".join(result))
elif args.command == 'count':
    if args.repository not in REPOSITORIES:
        parser.error('repository key "{}" unknown'.format(args.repository))

    ConnectDb(args)
    key = getattr(Namespace, args.repository)

    for result in RetrieveCiteCounts(key):
        print("\t".join(result))
elif args.command == 'map':
    if args.from_repository not in REPOSITORIES:
        parser.error('FROMKEY repository "{}" unknown'.format(args.from_repository))
    if args.to_repository not in REPOSITORIES:
        parser.error('TOKEY repository "{}" unknown'.format(args.to_repository))

    ConnectDb(args)

    from_key = getattr(Namespace, args.from_repository)
    to_key = getattr(Namespace, args.to_repository)
    for mapping in MapRepositories(from_key, to_key):
        print("\t".join(mapping))
else:
    parser.error('wrong number of arguments')
